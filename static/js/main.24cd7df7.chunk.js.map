{"version":3,"sources":["serviceWorker.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","util/MyPopup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","tabular","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","pointing","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","writeQuery","getPosts","filter","p","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","size","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","onError","err","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","Transition","Group","map","key","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","extensions","exception","noValidate","label","placehodler","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","console","log","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sFCfAC,EAAe,CACnBC,KAAM,MAGR,GAAIC,aAAaC,QAAQ,YAAa,CACpC,IAAMC,EAAeC,YAAUH,aAAaC,QAAQ,aAE7B,IAAnBC,EAAaE,IAAaC,KAAKC,MACjCN,aAAaO,WAAW,YAExBT,EAAaC,KAAOG,EAIxB,IAAMM,EAAcC,wBAAc,CAChCV,KAAM,KACNW,MAAO,SAACC,KACRC,OAAQ,eAGV,SAASC,EAAYC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,QACH,OAAO,2BACFF,GADL,IAEEf,KAAMgB,EAAOE,UAEjB,IAAK,SACH,OAAO,2BACFH,GADL,IAEEf,KAAM,OAEV,QACE,OAAOe,GAIb,SAASI,EAAaC,GAAQ,IAAD,EACDC,qBAAWP,EAAaf,GADvB,mBACpBgB,EADoB,KACbO,EADa,KAc3B,OACE,kBAACb,EAAYc,SAAb,eACEC,MAAO,CAAExB,KAAMe,EAAMf,KAAMW,MAb/B,SAAeC,GACbX,aAAawB,QAAQ,WAAYb,EAASc,OAC1CJ,EAAS,CACPL,KAAM,QACNC,QAASN,KASyBC,OANtC,WACEZ,aAAaO,WAAW,YACxBc,EAAS,CAAEL,KAAM,cAKXG,I,aCxCKO,MAbf,YAAoD,IAArBC,EAAoB,EAA/BC,UAAyBC,EAAM,6BACzC9B,EAAS+B,qBAAWtB,GAApBT,KAER,OACE,kBAAC,IAAD,iBACI8B,EADJ,CAEAE,OAAQ,SAAAZ,GAAK,OACXpB,EAAM,kBAAC,IAAD,CAAUiC,GAAG,iBAAoB,kBAACL,EAAcR,Q,SCsD7Cc,MA3Df,WAAoB,IAAD,EACOH,qBAAWtB,GAA3BT,EADS,EACTA,KAAMa,EADG,EACHA,OACRsB,EAAWxC,OAAOC,SAASuC,SAE3BC,EAAoB,iBAAbD,EAA8B,OAASA,EAASE,OAAO,GAJnD,EAMmBC,mBAASF,GAN5B,mBAMVG,EANU,KAMEC,EANF,KAQXC,EAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiBH,EAAcG,IA8CvD,OA5CgB3C,EACd,kBAAC4C,EAAA,EAAD,CAAMC,SAAO,EAACC,MAAM,QAChB,kBAACF,EAAA,EAAKG,KAAN,CACEJ,KAAM3C,EAAKgD,SACXC,QAAM,EACNC,GAAIC,IACJlB,GAAG,iBAEL,kBAACW,EAAA,EAAKA,KAAN,CAAWQ,SAAS,SAClB,kBAACR,EAAA,EAAKG,KAAN,CACEJ,KAAK,SACLU,QAASxC,MAMjB,kBAAC+B,EAAA,EAAD,CAAMC,SAAO,EAACC,MAAM,QAChB,kBAACF,EAAA,EAAKG,KAAN,CACEJ,KAAK,OACLM,OAAuB,SAAfV,EACRc,QAASZ,EACTS,GAAIC,IACJlB,GAAG,iBAEL,kBAACW,EAAA,EAAKA,KAAN,CAAWQ,SAAS,SAClB,kBAACR,EAAA,EAAKG,KAAN,CACEJ,KAAK,QACLM,OAAuB,UAAfV,EACRc,QAASZ,EACTS,GAAIC,IACJlB,GAAG,sBAEL,kBAACW,EAAA,EAAKG,KAAN,CACEJ,KAAK,WACLM,OAAuB,aAAfV,EACRc,QAASZ,EACTS,GAAIC,IACJlB,GAAG,4B,2HC/CAqB,MAJf,YAAwC,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAC1B,OAAO,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACH,QAASA,EAASI,QAASH,K,4MC8CpD,IAAMI,EAAqBC,IAAH,KAWTC,EApDf,YAA+D,IAAzC9D,EAAwC,EAAxCA,KAAwC,IAAlC+D,KAAQC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MAAW,EAClC5B,oBAAS,GADyB,mBACrD6B,EADqD,KAC9CC,EAD8C,KAE5DC,qBAAU,WACJrE,GAAQkE,EAAMI,MAAK,SAAAC,GAAI,OAAIA,EAAKvB,WAAahD,EAAKgD,YACpDoB,GAAS,GACJA,GAAS,KACf,CAACpE,EAAMkE,IANkD,MAQzCM,sBAAYZ,EAAoB,CACjDa,UAAW,CAAEC,OAAQV,KADhBW,EARqD,oBAYtDC,EAAa5E,EACjBmE,EACE,kBAACU,EAAA,EAAD,CAAQ/B,MAAM,QACZ,kBAACgC,EAAA,EAAD,CAAMnC,KAAK,WAGX,kBAACkC,EAAA,EAAD,CAAQ/B,MAAM,OAAOiC,OAAK,GACxB,kBAACD,EAAA,EAAD,CAAMnC,KAAK,WAIf,kBAACkC,EAAA,EAAD,CAAQ3B,GAAIC,IAAMlB,GAAG,oBAAoBa,MAAM,OAAOiC,OAAK,GACzD,kBAACD,EAAA,EAAD,CAAMnC,KAAK,WAGjB,OAEE,kBAACkC,EAAA,EAAD,CAAQ3B,GAAG,MAAM8B,cAAc,QAAQ3B,QAASsB,GAC9C,kBAAC,EAAD,CAASpB,QAASY,EAAQ,SAAW,YAClCS,GAEH,kBAACK,EAAA,EAAD,CAAOF,OAAK,EAACjC,MAAM,OAAOoC,SAAS,QAChCjB,K,sQCzCF,IAAMkB,EAAoBtB,IAAH,K,kaCgD9B,IAAMuB,EAAuBvB,IAAH,KAKpBwB,EAA0BxB,IAAH,KAadyB,EA7Df,YAAwD,IAAhCZ,EAA+B,EAA/BA,OAAQa,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAAY,EACflD,oBAAS,GADM,mBAC9CmD,EAD8C,KACjCC,EADiC,KAE/CC,EAAWJ,EAAYF,EAA0BD,EAFF,EAItBZ,sBAAYmB,EAAU,CACnDC,OADmD,SAC5CC,GAEL,GADAH,GAAe,IACVH,EAAW,CACd,IAAMO,EAAOD,EAAME,UAAU,CAC3BC,MAAOb,IAGTU,EAAMI,WAAW,CACfD,MAAOb,EACPW,KAAM,CACJI,SAAUJ,EAAKI,SAASC,QAAO,SAAAC,GAAC,OAAIA,EAAEpC,KAAOU,QAI/Cc,GAAUA,KAEhBf,UAAW,CACTC,SACAa,eAnBGc,EAJ8C,oBA0BrD,OACE,oCACA,kBAAC,EAAD,CAAS9C,QAAUgC,EAAY,iBAAmB,eAChD,kBAACV,EAAA,EAAD,CACE3B,GAAG,MACHJ,MAAM,MACNwD,QAAQ,QACRjD,QAAS,kBAAMqC,GAAe,KAC9B,kBAACZ,EAAA,EAAD,CAAMnC,KAAK,QAAQ4D,MAAO,CAAEC,OAAQ,OAGtC,kBAACC,EAAA,EAAD,CAASC,KAAMjB,EAAakB,SAAU,kBAAMjB,GAAe,IACzDkB,UAAWP,MCOJQ,MAzCf,YAAgG,IAAD,IAA3E9C,KAAQ+C,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,UAAW/C,EAAkD,EAAlDA,GAAIhB,EAA8C,EAA9CA,SAAUiB,EAAoC,EAApCA,UAAW+C,EAAyB,EAAzBA,aAAc9C,EAAW,EAAXA,MAE1ElE,EAAS+B,qBAAWtB,GAApBT,KAGR,OACE,kBAACiH,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACC,EAAA,EAAD,CACEd,QAAQ,QACRe,KAAK,OACLC,IAAI,kEAEN,kBAACL,EAAA,EAAKM,OAAN,KAAcvE,GACd,kBAACiE,EAAA,EAAKO,KAAN,CAAWtE,GAAIC,IAAMlB,GAAE,4BAAuB+B,IAAOyD,IAAOV,GAAWW,SAAQ,IAC/E,kBAACT,EAAA,EAAKU,YAAN,KACGb,IAGL,kBAACG,EAAA,EAAKE,QAAN,CAAcS,OAAK,GAEjB,kBAAC,EAAD,CAAY5H,KAAMA,EAAM+D,KAAM,CAAEC,KAAIE,QAAOD,eAE3C,kBAAC,EAAD,CAASV,QAAQ,gBACf,kBAACsB,EAAA,EAAD,CAAQG,cAAc,QAAQ9B,GAAIC,IAAMlB,GAAE,4BAAuB+B,IAC/D,kBAACa,EAAA,EAAD,CAAQ/B,MAAM,OAAOiC,OAAK,GACxB,kBAACD,EAAA,EAAD,CAAMnC,KAAK,cAEb,kBAACsC,EAAA,EAAD,CAAOF,OAAK,EAACjC,MAAM,OAAOoC,SAAS,QAChC8B,KAINhH,GAAQA,EAAKgD,WAAaA,GAAY,kBAAC,EAAD,CAAc0B,OAAQV,O,2BCzCxD6D,EAAU,SAACrC,GAA8B,IAApBzF,EAAmB,uDAAN,GAAM,EACvBuC,mBAASvC,GADc,mBAC5C+H,EAD4C,KACpCC,EADoC,KAG7CC,EAAW,SAACC,GAChBF,EAAU,2BAAKD,GAAN,kBAAeG,EAAMC,OAAOvF,KAAOsF,EAAMC,OAAO1G,UAGrD2G,EAAW,SAAAF,GACfA,EAAMG,iBACN5C,KAGF,MAAO,CACLwC,WACAG,WACAL,W,0ZCgDJ,IAAMO,GAAuBxE,IAAH,KAwBXyE,GAlFf,WAAqB,IAAD,EACqBT,GAuBvC,WACEU,MAxBiE,CACjEzB,KAAM,KADAgB,EADU,EACVA,OAAQE,EADE,EACFA,SAAUG,EADR,EACQA,SADR,EAKc3D,sBAAY6D,GAAsB,CAChE5D,UAAWqD,EACXlC,OAFgE,SAEzDC,EAAO2C,GACZ,IAAM1C,EAAOD,EAAME,UAAU,CAC3BC,MAAOb,IAETU,EAAMI,WAAW,CACfD,MAAOb,EACPW,KAAM,CACJI,SAAS,CAAEsC,EAAO1C,KAAKyC,YAAf,mBAA8BzC,EAAKI,cAG/C4B,EAAOhB,KAAO,IAEf2B,QAd+D,SAcvDC,GACN,OAAOA,KApBM,mBAKXH,EALW,KAKGI,EALH,KAKGA,MAuBrB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMT,SAAUA,GACd,8CACA,kBAACS,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CACEC,YAAY,WACZpG,KAAK,OACLqF,SAAUA,EACVxG,MAAOsG,EAAOhB,KACd6B,QAAOA,IAET,kBAAC9D,EAAA,EAAD,CAAQ5D,KAAK,SAAS6B,MAAM,QAA5B,YAMH6F,GACC,yBAAKK,UAAU,mBAAmBzC,MAAO,CAAE0C,aAAc,KACvD,wBAAID,UAAU,QACZ,4BAAKL,EAAMO,cAAc,GAAGC,aCXzBC,OArCf,WAAiB,IACPpJ,EAAS+B,qBAAWtB,GAApBT,KADM,EAMVqJ,mBAASlE,GAFXmE,EAJY,EAIZA,QAJY,IAKZxD,KAAiByD,GALL,aAKa,GALb,GAKLrD,SAIT,OACE,kBAACsD,EAAA,EAAD,CAAMC,QAAS,GACf,kBAACD,EAAA,EAAKE,IAAN,CAAUV,UAAU,cAClB,6CAEF,kBAACQ,EAAA,EAAKE,IAAN,KACG1J,GACC,kBAACwJ,EAAA,EAAKG,OAAN,KACE,kBAAC,GAAD,OAGHL,EAAW,gDACV,kBAACM,EAAA,EAAWC,MAAZ,KACEN,GAASA,EAAMO,KAAI,SAAA/F,GAAI,OACxB,kBAACyF,EAAA,EAAKG,OAAN,CAAaI,IAAMhG,EAAKC,GAAIuC,MAAO,CAAE0C,aAAc,KACjD,kBAAC,EAAD,CAAUlF,KAAOA,Y,oQCuC5B,IAAMiG,GAAanG,IAAH,MAgBDoG,GAjFf,SAAe7I,GACb,IAAM8I,EAAUnI,qBAAWtB,GADP,EAEQ6B,mBAAS,IAFjB,mBAEb6H,EAFa,KAELC,EAFK,OAImBvC,GAgBvC,WACEwC,MAjBgE,CAChErH,SAAU,GACVsH,SAAU,KAFJtC,EAJY,EAIZA,SAAUG,EAJE,EAIFA,SAAUL,EAJR,EAIQA,OAJR,EASatD,sBAAYwF,GAAY,CACvDpE,OADuD,SAChD2E,EADgD,GAChB,IAAb3J,EAAY,EAA1BkF,KAAOnF,MACjBuJ,EAAQvJ,MAAMC,GACdQ,EAAMoJ,QAAQC,KAAK,iBAErBhC,QALuD,SAK/CC,GACN0B,EAAU1B,EAAIQ,cAAc,GAAGwB,WAAWC,UAAUR,SAEtD1F,UAAWqD,IAjBO,mBASbuC,EATa,KASAf,EATA,KASAA,QAgBpB,OACE,yBAAKN,UAAU,kBACb,kBAACJ,EAAA,EAAD,CAAMT,SAAUA,EAAUyC,YAAU,EAAC5B,UAAWM,EAAU,UAAY,IACpE,qCACA,kBAACV,EAAA,EAAKE,MAAN,CACE+B,MAAM,WACNC,YAAY,WACZnI,KAAK,WACL1B,KAAK,OACLO,MAAOsG,EAAO9E,SACd2F,QAAOwB,EAAOnH,SACdgF,SAAUA,IAEZ,kBAACY,EAAA,EAAKE,MAAN,CACE+B,MAAM,WACNC,YAAY,WACZnI,KAAK,WACL1B,KAAK,WACLO,MAAOsG,EAAOwC,SACd3B,QAAOwB,EAAOG,SACdtC,SAAUA,IAEZ,kBAACnD,EAAA,EAAD,CAAQ5D,KAAK,SAAS8J,SAAO,GAA7B,UAKDC,OAAOC,KAAKd,GAAQe,OAAS,GAC5B,yBAAKlC,UAAU,oBACb,wBAAIA,UAAU,QACXgC,OAAOlD,OAAOqC,GAAQL,KAAI,SAACtI,GAAD,OACzB,wBAAIuI,IAAKvI,GAAQA,U,mZC6B/B,IAAM2J,GAAgBtH,IAAH,MAqBJuH,GA1Gf,SAAkBhK,GAChB,IAAM8I,EAAUnI,qBAAWtB,GADJ,EAEK6B,mBAAS,IAFd,mBAEhB6H,EAFgB,KAERC,EAFQ,OAIgBvC,GAmBxC,WACEwD,MApB4D,CAC3DrI,SAAU,GACVsH,SAAU,GACVgB,MAAO,GACPC,gBAAiB,KAJXvD,EAJe,EAIfA,SAAUG,EAJK,EAILA,SAAUL,EAJL,EAIKA,OAJL,EAWQtD,sBAAY2G,GAAe,CACxDvF,OADwD,SACjD2E,EADiD,GACd,IAAb3J,EAAY,EAA7BkF,KAAO0F,SACjBtB,EAAQvJ,MAAMC,GACdQ,EAAMoJ,QAAQC,KAAK,iBAErBhC,QALwD,SAKhDC,GACN0B,EAAU1B,EAAIQ,cAAc,GAAGwB,WAAWC,UAAUR,SAEtD1F,UAAWqD,IAnBU,mBAWhBuD,EAXgB,KAWL/B,EAXK,KAWLA,QAgBlB,OACE,yBAAKN,UAAU,kBACb,kBAACJ,EAAA,EAAD,CAAMT,SAAUA,EAAUyC,YAAU,EAAC5B,UAAWM,EAAU,UAAY,IACpE,wCACA,kBAACV,EAAA,EAAKE,MAAN,CACE+B,MAAM,WACNC,YAAY,WACZnI,KAAK,WACL1B,KAAK,OACLO,MAAOsG,EAAO9E,SACd2F,QAAOwB,EAAOnH,SACdgF,SAAUA,IAEZ,kBAACY,EAAA,EAAKE,MAAN,CACE+B,MAAM,QACNC,YAAY,QACZnI,KAAK,QACL1B,KAAK,QACLO,MAAOsG,EAAOwD,MACd3C,QAAOwB,EAAOmB,MACdtD,SAAUA,IAEZ,kBAACY,EAAA,EAAKE,MAAN,CACE+B,MAAM,WACNC,YAAY,WACZnI,KAAK,WACL1B,KAAK,WACLO,MAAOsG,EAAOwC,SACd3B,QAAOwB,EAAOG,SACdtC,SAAUA,IAEZ,kBAACY,EAAA,EAAKE,MAAN,CACE+B,MAAM,mBACNC,YAAY,mBACZnI,KAAK,kBACL1B,KAAK,WACLO,MAAOsG,EAAOyD,gBACd5C,QAAOwB,EAAOoB,gBACdvD,SAAUA,IAEZ,kBAACnD,EAAA,EAAD,CAAQ5D,KAAK,SAAS8J,SAAO,GAA7B,aAKDC,OAAOC,KAAKd,GAAQe,OAAS,GAC5B,yBAAKlC,UAAU,oBACb,wBAAIA,UAAU,QACXgC,OAAOlD,OAAOqC,GAAQL,KAAI,SAACtI,GAAD,OACzB,wBAAIuI,IAAKvI,GAAQA,U,mkBC8C/B,IAAMiK,GAA0B5H,IAAH,MAavB6H,GAAmB7H,IAAH,MAsBP8H,GA1Jf,SAAoBvK,GAClB,IA0BIwK,EA1BElH,EAAStD,EAAMtB,MAAM+L,OAAOnH,OAC1B1E,EAAS+B,qBAAWtB,GAApBT,KACJ8L,EAAkBC,iBAAO,MAHJ,EAKKzJ,mBAAS,IALd,mBAKlB0J,EALkB,KAKTC,EALS,OAMU5C,mBAASqC,GAAkB,CAC5DjH,UAAW,CACTC,YAFIoB,KAAQoG,GANS,aAMG,GANH,GAMTA,QANS,EAYD1H,sBAAYiH,GAAyB,CAC3D7F,OAD2D,WAEzDqG,EAAW,IACXH,EAAgBK,QAAQC,QAE1B3H,UAAW,CACTC,SACAoC,KAAMkF,KAPHK,EAZkB,oBA4BzB,GAAKH,EAEE,CAAC,IACElI,EAA4EkI,EAA5ElI,GAAI8C,EAAwEoF,EAAxEpF,KAAMC,EAAkEmF,EAAlEnF,UAAW/D,EAAuDkJ,EAAvDlJ,SAAUsJ,EAA6CJ,EAA7CI,SAAUpI,EAAmCgI,EAAnChI,MAAOD,EAA4BiI,EAA5BjI,UAAW+C,EAAiBkF,EAAjBlF,aAEnE4E,EACE,kBAACpC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,CAAa4C,MAAO,GAClB,kBAACnF,EAAA,EAAD,CAAOE,IAAI,gEACTD,KAAK,QACLmF,MAAM,WAEV,kBAAChD,EAAA,EAAKG,OAAN,CAAa4C,MAAO,IAClB,kBAACtF,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAKM,OAAN,KAAcvE,GACd,kBAACiE,EAAA,EAAKO,KAAN,KAAYC,IAAOV,GAAWW,WAC9B,kBAACT,EAAA,EAAKU,YAAN,KAAmBb,IAErB,6BACA,kBAACG,EAAA,EAAKE,QAAN,CAAcS,OAAK,GAEjB,kBAAC,EAAD,CAAY5H,KAAMA,EAAM+D,KAAM,CAAEC,KAAIC,YAAWC,WAE/C,kBAAC,EAAD,CAASX,QAAQ,mBACjB,kBAACsB,EAAA,EAAD,CACE3B,GAAG,MACH8B,cAAc,QACd3B,QAAS,kBAAMoJ,QAAQC,IAAI,qBAE3B,kBAAC7H,EAAA,EAAD,CAAQE,OAAK,EAACjC,MAAM,QAClB,kBAACgC,EAAA,EAAD,CAAMnC,KAAK,cAEb,kBAACsC,EAAA,EAAD,CAAOF,OAAK,EAACjC,MAAM,OAAOoC,SAAS,QAChC8B,KAIJhH,GAAQA,EAAKgD,WAAaA,GACzB,kBAAC,EAAD,CAAc0B,OAAQV,EAAIwB,SA7C1C,WACEpE,EAAMoJ,QAAQC,KAAK,qBAgDVzK,GACC,kBAACiH,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACD,EAAA,EAAKE,QAAN,KACE,6CACA,kBAACyB,EAAA,EAAD,KACE,yBAAKI,UAAU,yBACb,2BACE/H,KAAK,OACL8H,YAAY,UACZpG,KAAK,UACLnB,MAAOwK,EACPhE,SAAU,SAAAC,GAAK,OAAIgE,EAAWhE,EAAMC,OAAO1G,QAC3CmL,IAAKb,IAEP,4BAAQ7K,KAAK,SACX+H,UAAU,iBACV4D,SAA6B,KAAnBZ,EAAQa,OAClBxJ,QAASgJ,GAHX,cAUTC,EAASxC,KAAI,SAAAkC,GAAO,OACnB,kBAAC/E,EAAA,EAAD,CAAMC,OAAK,EAAC6C,IAAKiC,EAAQhI,IACvB,kBAACiD,EAAA,EAAKE,QAAN,KACGnH,GAAQA,EAAKgD,WAAagJ,EAAQhJ,UACjC,kBAAC,EAAD,CAAc0B,OAAQV,EAAIuB,UAAWyG,EAAQhI,KAI/C,kBAACiD,EAAA,EAAKM,OAAN,KAAcyE,EAAQhJ,UACtB,kBAACiE,EAAA,EAAKO,KAAN,KAAYC,IAAOuE,EAAQjF,WAAWW,WACtC,kBAACT,EAAA,EAAKU,YAAN,KAAmBqE,EAAQlF,mBA7EzC8E,EAAa,8CAsFf,OAAOA,GC7FMkB,OAhBf,WACE,OACE,kBAAC3L,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC4L,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAAC5K,KAAK,eAAeP,UAAWuH,KAC5C,kBAAC,EAAD,CAAW4D,OAAK,EAAC5K,KAAK,oBAAoBP,UAAWoI,KACrD,kBAAC,EAAD,CAAW+C,OAAK,EAAC5K,KAAK,uBAAuBP,UAAWuJ,KACtD,kBAAC,IAAD,CAAO4B,OAAK,EAAC5K,KAAK,4BAA2BP,UAAW8J,S,UCpB9DsB,GAAWC,yBAAe,CAC9BC,IAAK,0BAGDC,GAAWC,cAAW,WAC1B,IAAM3L,EAAQzB,aAAaC,QAAQ,YACnC,MAAM,CACJoN,QAAS,CACPC,cAAe7L,EAAK,eAAWA,GAAU,QAKzC8L,GAAS,IAAIC,eAAa,CAC9BC,KAAMN,GAASO,OAAOV,IACtBW,MAAO,IAAIC,kBAMX,qBAAC,iBAAD,CAAgBL,OAAQA,IACtB,kBAAC,GAAD,OCvBJM,IAAS9L,OACP+L,GACAC,SAASC,eAAe,SjB6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7F,GACL8D,QAAQ9D,MAAMA,EAAMQ,c","file":"static/js/main.24cd7df7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useReducer, createContext } from 'react'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\nconst initialState = {\r\n  user: null\r\n}\r\n\r\nif (localStorage.getItem('jwtToken')) {\r\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem('jwtToken')\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => { },\r\n  logout: () => { }\r\n})\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      }\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  function login(userData) {\r\n    localStorage.setItem(\"jwtToken\", userData.token)\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: userData\r\n    })\r\n  }\r\n  function logout() {\r\n    localStorage.removeItem(\"jwtToken\")\r\n    dispatch({ type: 'LOGOUT' });\r\n  }\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user: state.user, login, logout }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { AuthContext, AuthProvider }\r\n","import React, { useContext } from 'react'\r\nimport { Route, Redirect} from 'react-router-dom'\r\nimport { AuthContext} from '../context/auth'\r\n\r\nfunction AuthRoute({component: Component, ...rest}){\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return(\r\n    <Route\r\n    {...rest}\r\n    render={props =>\r\n      user? <Redirect to=\"/social-app/\" /> : <Component {...props}/>\r\n    }\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React, { useContext, useState } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../context/auth'\r\n\r\nfunction MenuBar() {\r\n  const { user, logout} = useContext(AuthContext)\r\n  const pathname = window.location.pathname;\r\n\r\n  const path = pathname === '/social-app/' ? 'home' : pathname.substr(1)\r\n\r\n  const [activeItem, setActiveItem] = useState(path)\r\n\r\n  const handleItemClick = (e, { name }) => setActiveItem(name)\r\n\r\n  const menuBar = user ? (\r\n    <Menu tabular color=\"teal\">\r\n        <Menu.Item\r\n          name={user.username}\r\n          active\r\n          as={Link}\r\n          to=\"/social-app/\"\r\n        />\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item\r\n            name='logout'\r\n            onClick={logout}\r\n          />\r\n\r\n        </Menu.Menu>\r\n      </Menu>\r\n  ) : (\r\n    <Menu tabular color=\"teal\">\r\n        <Menu.Item\r\n          name='home'\r\n          active={activeItem === 'home'}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/social-app/\"\r\n        />\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item\r\n            name='login'\r\n            active={activeItem === 'login'}\r\n            onClick={handleItemClick}\r\n            as={Link}\r\n            to=\"/social-app/login\"\r\n          />\r\n          <Menu.Item\r\n            name='register'\r\n            active={activeItem === 'register'}\r\n            onClick={handleItemClick}\r\n            as={Link}\r\n            to=\"/social-app/register\"\r\n          />\r\n        </Menu.Menu>\r\n      </Menu>\r\n  )\r\n\r\n  return menuBar;\r\n}\r\n\r\n\r\n\r\nexport default MenuBar;\r\n","import React from 'react'\r\nimport {Popup} from 'semantic-ui-react'\r\n\r\nfunction MyPopup({ content, children }){\r\n  return <Popup inverted content={content} trigger={children}/>\r\n}\r\n\r\nexport default MyPopup;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/client'\r\nimport gql from 'graphql-tag'\r\n\r\nimport { Button, Icon, Label } from 'semantic-ui-react';\r\nimport MyPopup from '../util/MyPopup'\r\n\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false)\r\n  useEffect(() => {\r\n    if (user && likes.find(like => like.username === user.username)) {\r\n      setLiked(true)\r\n    } else setLiked(false)\r\n  }, [user, likes])\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  })\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color='teal'>\r\n        <Icon name='heart' />\r\n      </Button>\r\n    ) : (\r\n        <Button color='teal' basic>\r\n          <Icon name='heart' />\r\n        </Button>\r\n      )\r\n  ) : (\r\n      <Button as={Link} to='/social-app/login' color='teal' basic>\r\n        <Icon name='heart' />\r\n      </Button>\r\n    )\r\n  return (\r\n\r\n    <Button as='div' labelPosition='right' onClick={likePost}>\r\n      <MyPopup content={liked ? 'Unlike' : 'Like it!'}>\r\n        {likeButton}\r\n      </MyPopup>\r\n      <Label basic color='teal' pointing='left'>\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n\r\n  )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\nmutation likePost($postId: ID!){\r\n  likePost(postId: $postId){\r\n    id\r\n    likes{\r\n      id username\r\n    }\r\n    likeCount\r\n  }\r\n}\r\n`\r\nexport default LikeButton;\r\n","import gql from 'graphql-tag'\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n{\r\ngetPosts{\r\n  id\r\n  body\r\n  createdAt\r\n  username\r\n  likeCount\r\n  likes{\r\n    username\r\n  }\r\n  commentCount\r\n  comments{\r\n    id\r\n    username\r\n    createdAt\r\n    body\r\n  }\r\n}\r\n}\r\n`\r\n","import React, { useState } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/client'\r\nimport { Button, Confirm, Icon } from 'semantic-ui-react'\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\r\nimport MyPopup from '../util/MyPopup'\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n  const [confirmOpen, setConfirmOpen] = useState(false)\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n\r\n  const [deletePostOrMutation] = useMutation(mutation, {\r\n    update(proxy) {\r\n      setConfirmOpen(false);\r\n      if (!commentId) {\r\n        const data = proxy.readQuery({\r\n          query: FETCH_POSTS_QUERY\r\n        });\r\n\r\n        proxy.writeQuery({\r\n          query: FETCH_POSTS_QUERY,\r\n          data: {\r\n            getPosts: data.getPosts.filter(p => p.id !== postId)\r\n          }\r\n        })\r\n      }\r\n      if (callback) callback()\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId\r\n    }\r\n  })\r\n  return (\r\n    <>\r\n    <MyPopup content= {commentId ? 'Delete comment' : 'Delete post'}>\r\n      <Button\r\n        as=\"div\"\r\n        color=\"red\"\r\n        floated=\"right\"\r\n        onClick={() => setConfirmOpen(true)}>\r\n        <Icon name=\"trash\" style={{ margin: 0 }} />\r\n      </Button>\r\n     </MyPopup>\r\n      <Confirm open={confirmOpen} onCancel={() => setConfirmOpen(false)}\r\n        onConfirm={deletePostOrMutation} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\nmutation deletePost($postId: ID!){\r\n  deletePost(postId: $postId)\r\n}\r\n`\r\nconst DELETE_COMMENT_MUTATION = gql`\r\nmutation deleteComment($postId: ID!, $commentId: ID!){\r\n  deleteComment(postId: $postId, commentId: $commentId){\r\n    id\r\n    comments{\r\n      id username createdAt body\r\n    }\r\n    commentCount\r\n  }\r\n}\r\n\r\n`\r\n\r\nexport default DeleteButton;\r\n","import React, { useContext } from 'react';\r\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton'\r\nimport MyPopup from '../util/MyPopup'\r\n\r\n\r\n\r\nfunction PostCard({ post: { body, createdAt, id, username, likeCount, commentCount, likes } }) {\r\n\r\n  const { user } = useContext(AuthContext)\r\n\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Image\r\n          floated='right'\r\n          size='mini'\r\n          src='https://react.semantic-ui.com/images/avatar/large/matthew.png'\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/social-app/posts/${id}`}>{moment(createdAt).fromNow(true)}</Card.Meta>\r\n        <Card.Description>\r\n          {body}\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n\r\n        <MyPopup content='Comment post'>\r\n          <Button labelPosition='right' as={Link} to={`/social-app/posts/${id}`}>\r\n            <Button color='blue' basic>\r\n              <Icon name='comments' />\r\n            </Button>\r\n            <Label basic color='blue' pointing='left'>\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card >\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default PostCard;\r\n","import { useState } from 'react'\r\n\r\n\r\nexport const useForm = (callback, initialState={}) =>{\r\n  const [values, setValues] = useState(initialState)\r\n\r\n  const onChange = (event) => {\r\n    setValues({ ...values, [event.target.name]: event.target.value })\r\n  };\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    callback();\r\n  }\r\n\r\n  return {\r\n    onChange,\r\n    onSubmit,\r\n    values\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/client'\r\n\r\nimport { useForm } from '../util/hooks'\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\r\n\r\nfunction PostForm() {\r\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n    body: ''\r\n  })\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n      });\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: {\r\n          getPosts: [result.data.createPost, ...data.getPosts],\r\n        },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n     onError(err) {\r\n       return err;\r\n     },\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <h2>Create a post:</h2>\r\n        <Form.Field>\r\n          <Form.Input\r\n            placeholder=\"Hi World\"\r\n            name=\"body\"\r\n            onChange={onChange}\r\n            value={values.body}\r\n            error={error ? true : false}\r\n          />\r\n          <Button type=\"submit\" color=\"teal\">\r\n            Submit\r\n        </Button>\r\n\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\" style={{ marginBottom: 20}}>\r\n          <ul className=\"list\">\r\n            <li>{error.graphQLErrors[0].message}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likes {\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;\r\n","import React, { useContext } from 'react'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Grid, Transition } from 'semantic-ui-react'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport PostCard from '../components/PostCard'\r\nimport PostForm from '../components/PostForm'\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext)\r\n  const {\r\n\r\n    loading,\r\n    data: {getPosts: posts} ={}\r\n  } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n\r\n  return (\r\n    <Grid columns={3}>\r\n    <Grid.Row className=\"page-title\">\r\n      <h1>Recent Posts</h1>\r\n    </Grid.Row>\r\n    <Grid.Row>\r\n      {user && (\r\n        <Grid.Column>\r\n          <PostForm/>\r\n        </Grid.Column>\r\n      )}\r\n      {loading ? (<h1>Loading posts...</h1>) :\r\n      ( <Transition.Group>\r\n        { posts && posts.map(post => (\r\n         <Grid.Column key ={post.id} style={{ marginBottom: 20}}>\r\n           <PostCard post ={post}/>\r\n         </Grid.Column>\r\n       ))}\r\n       </Transition.Group>)}\r\n    </Grid.Row>\r\n    </Grid>\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Home;\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/client'\r\nimport gql from 'graphql-tag'\r\nimport { AuthContext} from '../context/auth'\r\nimport { useForm} from '../util/hooks'\r\n\r\nfunction Login(props) {\r\n  const context = useContext(AuthContext)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\r\n    username: '',\r\n    password: ''\r\n  })\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: {login: userData}}) {\r\n      context.login(userData)\r\n      props.history.push('/social-app/');\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n    },\r\n    variables: values\r\n\r\n  })\r\n  function loginUserCallback(){\r\n    loginUser()\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : ''}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placehodler=\"Username\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placehodler=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className='ui error message'>\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\nmutation login(\r\n  $username: String!\r\n  $password: String!\r\n\r\n) {\r\n  login(\r\n      username: $username\r\n      password: $password\r\n\r\n  ){\r\n    id email username createdAt token\r\n  }\r\n}\r\n`\r\n\r\nexport default Login;\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/client'\r\nimport gql from 'graphql-tag'\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\n\r\nfunction Register(props) {\r\n  const context = useContext(AuthContext)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const { onChange, onSubmit, values } = useForm(registerUser, {\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    confirmPassword: ''\r\n  })\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: {register: userData}}) {\r\n      context.login(userData)\r\n      props.history.push('/social-app/');\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n    },\r\n    variables: values\r\n\r\n  })\r\n\r\n function registerUser(){\r\n   addUser()\r\n }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : ''}>\r\n        <h1>Register</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placehodler=\"Username\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placehodler=\"Email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          error={errors.email ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placehodler=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Confirm Password\"\r\n          placehodler=\"Confirm Password\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          value={values.confirmPassword}\r\n          error={errors.confirmPassword ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className='ui error message'>\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\nmutation register(\r\n  $username: String!\r\n  $email: String!\r\n  $password: String!\r\n  $confirmPassword: String!\r\n\r\n) {\r\n  register(\r\n    registerInput: {\r\n      username: $username\r\n      email: $email\r\n      password: $password\r\n      confirmPassword: $confirmPassword\r\n    }\r\n  ){\r\n    id email username createdAt token\r\n  }\r\n}\r\n`\r\n\r\nexport default Register;\r\n","import React, { useState, useContext, useRef } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { Button, Card, Form, Grid, Label, Icon, Image } from 'semantic-ui-react';\r\nimport moment from 'moment'\r\nimport LikeButton from '../components/LikeButton';\r\nimport { AuthContext } from '../context/auth'\r\nimport DeleteButton from '../components/DeleteButton'\r\nimport MyPopup from '../util/MyPopup'\r\n\r\nfunction SinglePost(props) {\r\n  const postId = props.match.params.postId;\r\n  const { user } = useContext(AuthContext)\r\nconst commentInputRef = useRef(null)\r\n\r\n  const [comment, setComment] = useState('');\r\n  const { data: { getPost } = {} } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId\r\n    }\r\n  })\r\n\r\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment('');\r\n      commentInputRef.current.blur();\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment\r\n    }\r\n  })\r\n\r\n  function deletePostCallback() {\r\n    props.history.push('/social-app/')\r\n  }\r\n\r\n  let postMarkup;\r\n  if (!getPost) {\r\n    postMarkup = <p>Loading post...</p>\r\n  } else {\r\n    const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = getPost;\r\n\r\n    postMarkup = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Image src='https://react.semantic-ui.com/images/avatar/large/matthew.png'\r\n              size=\"small\"\r\n              float=\"right\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n\r\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n\r\n                <MyPopup content='Comment on post'>\r\n                <Button\r\n                  as=\"div\"\r\n                  labelPosition=\"right\"\r\n                  onClick={() => console.log('Comment on Post')}\r\n                >\r\n                  <Button basic color=\"blue\">\r\n                    <Icon name=\"comments\" />\r\n                  </Button>\r\n                  <Label basic color=\"blue\" pointing=\"left\">\r\n                    {commentCount}\r\n                  </Label>\r\n                </Button>\r\n                </MyPopup>\r\n                {user && user.username === username && (\r\n                  <DeleteButton postId={id} callback={deletePostCallback} />\r\n                )}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && (\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <p>Post a comment</p>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Comment\"\r\n                        name=\"comment\"\r\n                        value={comment}\r\n                        onChange={event => setComment(event.target.value)}\r\n                        ref={commentInputRef}\r\n                      />\r\n                      <button type=\"submit\"\r\n                        className=\"ui button teal\"\r\n                        disabled={comment.trim() === ''}\r\n                        onClick={submitComment}\r\n                      >Submit</button>\r\n                    </div>\r\n                  </Form>\r\n                </Card.Content>\r\n              </Card>\r\n            )}\r\n            {comments.map(comment => (\r\n              <Card fluid key={comment.id}>\r\n                <Card.Content>\r\n                  {user && user.username === comment.username && (\r\n                    <DeleteButton postId={id} commentId={comment.id}>\r\n\r\n                    </DeleteButton>\r\n                  )}\r\n                  <Card.Header>{comment.username}</Card.Header>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                  <Card.Description>{comment.body}</Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n  return postMarkup;\r\n\r\n}\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql`\r\nmutation($postId: ID!, $body: String!){\r\n  createComment(postId: $postId, body: $body){\r\n    id\r\n    comments {\r\n      id body createdAt username\r\n    }\r\n    commentCount\r\n  }\r\n}\r\n\r\n`\r\n\r\nconst FETCH_POST_QUERY = gql`\r\nquery($postId: ID!){\r\n  getPost(postId: $postId){\r\n    id\r\n    body\r\n    createdAt\r\n    username\r\n    likeCount\r\n    likes{\r\n      username\r\n    }\r\n    commentCount\r\n    comments{\r\n      id\r\n      username\r\n      createdAt\r\n      body\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport default SinglePost;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport { AuthProvider } from './context/auth'\nimport AuthRoute from './util/AuthRoute'\n\n\nimport MenuBar from './components/MenuBar'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\n import SinglePost from './pages/SinglePost'\n\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path='/social-app/' component={Home} />\n          <AuthRoute exact path='/social-app/login' component={Login} />\n          <AuthRoute exact path='/social-app/register' component={Register} />\n          { <Route exact path='/social-app/posts/:postId'component={SinglePost}/> }\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport App from './App'\r\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\r\nimport { setContext } from 'apollo-link-context'\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:5000'\r\n})\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem('jwtToken');\r\n  return{\r\n    headers: {\r\n      Authorization: token ? `user ${token}` : ''\r\n    }\r\n  }\r\n})\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n})\r\n\r\n\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App/>\r\n  </ApolloProvider>\r\n)\r\n","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}